/**
 * generated by Xtext 2.9.2
 */
package de.htwg.zeta.xtext.calculatorForm.util;

import de.htwg.zeta.xtext.calculatorForm.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.htwg.zeta.xtext.calculatorForm.CalculatorFormPackage
 * @generated
 */
public class CalculatorFormAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CalculatorFormPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CalculatorFormAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CalculatorFormPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CalculatorFormSwitch<Adapter> modelSwitch =
    new CalculatorFormSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseFormElement(FormElement object)
      {
        return createFormElementAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseFieldInput(FieldInput object)
      {
        return createFieldInputAdapter();
      }
      @Override
      public Adapter caseFieldSelect(FieldSelect object)
      {
        return createFieldSelectAdapter();
      }
      @Override
      public Adapter caseFieldSelectChild(FieldSelectChild object)
      {
        return createFieldSelectChildAdapter();
      }
      @Override
      public Adapter caseFieldOption(FieldOption object)
      {
        return createFieldOptionAdapter();
      }
      @Override
      public Adapter caseFieldOptionGroup(FieldOptionGroup object)
      {
        return createFieldOptionGroupAdapter();
      }
      @Override
      public Adapter caseFieldChoice(FieldChoice object)
      {
        return createFieldChoiceAdapter();
      }
      @Override
      public Adapter caseFieldChoiceOption(FieldChoiceOption object)
      {
        return createFieldChoiceOptionAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter casePage(Page object)
      {
        return createPageAdapter();
      }
      @Override
      public Adapter casePageChild(PageChild object)
      {
        return createPageChildAdapter();
      }
      @Override
      public Adapter caseButton(Button object)
      {
        return createButtonAdapter();
      }
      @Override
      public Adapter caseButtonSubmit(ButtonSubmit object)
      {
        return createButtonSubmitAdapter();
      }
      @Override
      public Adapter caseCalculate(Calculate object)
      {
        return createCalculateAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMultiOrDiv(MultiOrDiv object)
      {
        return createMultiOrDivAdapter();
      }
      @Override
      public Adapter caseBooleanNegation(BooleanNegation object)
      {
        return createBooleanNegationAdapter();
      }
      @Override
      public Adapter caseArithmeticSigned(ArithmeticSigned object)
      {
        return createArithmeticSignedAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseFloatLiteral(FloatLiteral object)
      {
        return createFloatLiteralAdapter();
      }
      @Override
      public Adapter caseFieldReference(FieldReference object)
      {
        return createFieldReferenceAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FormElement <em>Form Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FormElement
   * @generated
   */
  public Adapter createFormElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldInput <em>Field Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldInput
   * @generated
   */
  public Adapter createFieldInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldSelect <em>Field Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldSelect
   * @generated
   */
  public Adapter createFieldSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldSelectChild <em>Field Select Child</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldSelectChild
   * @generated
   */
  public Adapter createFieldSelectChildAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldOption <em>Field Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldOption
   * @generated
   */
  public Adapter createFieldOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldOptionGroup <em>Field Option Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldOptionGroup
   * @generated
   */
  public Adapter createFieldOptionGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldChoice <em>Field Choice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldChoice
   * @generated
   */
  public Adapter createFieldChoiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldChoiceOption <em>Field Choice Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldChoiceOption
   * @generated
   */
  public Adapter createFieldChoiceOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Page <em>Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Page
   * @generated
   */
  public Adapter createPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.PageChild <em>Page Child</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.PageChild
   * @generated
   */
  public Adapter createPageChildAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Button <em>Button</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Button
   * @generated
   */
  public Adapter createButtonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.ButtonSubmit <em>Button Submit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.ButtonSubmit
   * @generated
   */
  public Adapter createButtonSubmitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Calculate <em>Calculate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Calculate
   * @generated
   */
  public Adapter createCalculateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.MultiOrDiv <em>Multi Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.MultiOrDiv
   * @generated
   */
  public Adapter createMultiOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.BooleanNegation <em>Boolean Negation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.BooleanNegation
   * @generated
   */
  public Adapter createBooleanNegationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.ArithmeticSigned <em>Arithmetic Signed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.ArithmeticSigned
   * @generated
   */
  public Adapter createArithmeticSignedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FloatLiteral <em>Float Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FloatLiteral
   * @generated
   */
  public Adapter createFloatLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.htwg.zeta.xtext.calculatorForm.FieldReference <em>Field Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.htwg.zeta.xtext.calculatorForm.FieldReference
   * @generated
   */
  public Adapter createFieldReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CalculatorFormAdapterFactory
