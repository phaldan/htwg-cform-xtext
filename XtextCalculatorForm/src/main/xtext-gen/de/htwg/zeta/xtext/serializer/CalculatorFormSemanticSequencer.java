/*
 * generated by Xtext 2.9.2
 */
package de.htwg.zeta.xtext.serializer;

import com.google.inject.Inject;
import de.htwg.zeta.xtext.calculatorForm.ArithmeticSigned;
import de.htwg.zeta.xtext.calculatorForm.BooleanNegation;
import de.htwg.zeta.xtext.calculatorForm.ButtonSubmit;
import de.htwg.zeta.xtext.calculatorForm.Calculate;
import de.htwg.zeta.xtext.calculatorForm.CalculatorFormPackage;
import de.htwg.zeta.xtext.calculatorForm.Div;
import de.htwg.zeta.xtext.calculatorForm.FieldChoice;
import de.htwg.zeta.xtext.calculatorForm.FieldChoiceOption;
import de.htwg.zeta.xtext.calculatorForm.FieldInput;
import de.htwg.zeta.xtext.calculatorForm.FieldOption;
import de.htwg.zeta.xtext.calculatorForm.FieldOptionGroup;
import de.htwg.zeta.xtext.calculatorForm.FieldReference;
import de.htwg.zeta.xtext.calculatorForm.FieldSelect;
import de.htwg.zeta.xtext.calculatorForm.FloatLiteral;
import de.htwg.zeta.xtext.calculatorForm.Form;
import de.htwg.zeta.xtext.calculatorForm.Group;
import de.htwg.zeta.xtext.calculatorForm.Minus;
import de.htwg.zeta.xtext.calculatorForm.Model;
import de.htwg.zeta.xtext.calculatorForm.Multi;
import de.htwg.zeta.xtext.calculatorForm.NumberLiteral;
import de.htwg.zeta.xtext.calculatorForm.OutputField;
import de.htwg.zeta.xtext.calculatorForm.OutputVariable;
import de.htwg.zeta.xtext.calculatorForm.Page;
import de.htwg.zeta.xtext.calculatorForm.PercentLiteral;
import de.htwg.zeta.xtext.calculatorForm.Plus;
import de.htwg.zeta.xtext.services.CalculatorFormGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CalculatorFormSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CalculatorFormGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CalculatorFormPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CalculatorFormPackage.ARITHMETIC_SIGNED:
				sequence_UnaryOperation(context, (ArithmeticSigned) semanticObject); 
				return; 
			case CalculatorFormPackage.BOOLEAN_NEGATION:
				sequence_UnaryOperation(context, (BooleanNegation) semanticObject); 
				return; 
			case CalculatorFormPackage.BUTTON_SUBMIT:
				sequence_ButtonSubmit(context, (ButtonSubmit) semanticObject); 
				return; 
			case CalculatorFormPackage.CALCULATE:
				sequence_Calculate(context, (Calculate) semanticObject); 
				return; 
			case CalculatorFormPackage.DIV:
				sequence_Multiplication(context, (Div) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_CHOICE:
				sequence_FieldChoice(context, (FieldChoice) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_CHOICE_OPTION:
				sequence_FieldChoiceOption(context, (FieldChoiceOption) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_INPUT:
				sequence_FieldInput(context, (FieldInput) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_OPTION:
				sequence_FieldOption(context, (FieldOption) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_OPTION_GROUP:
				sequence_FieldOptionGroup(context, (FieldOptionGroup) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_REFERENCE:
				sequence_Atomic(context, (FieldReference) semanticObject); 
				return; 
			case CalculatorFormPackage.FIELD_SELECT:
				sequence_FieldSelect(context, (FieldSelect) semanticObject); 
				return; 
			case CalculatorFormPackage.FLOAT_LITERAL:
				sequence_Literal(context, (FloatLiteral) semanticObject); 
				return; 
			case CalculatorFormPackage.FORM:
				sequence_Form(context, (Form) semanticObject); 
				return; 
			case CalculatorFormPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case CalculatorFormPackage.MINUS:
				sequence_Addition(context, (Minus) semanticObject); 
				return; 
			case CalculatorFormPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case CalculatorFormPackage.MULTI:
				sequence_Multiplication(context, (Multi) semanticObject); 
				return; 
			case CalculatorFormPackage.NUMBER_LITERAL:
				sequence_Literal(context, (NumberLiteral) semanticObject); 
				return; 
			case CalculatorFormPackage.OUTPUT_FIELD:
				sequence_ResultOutput(context, (OutputField) semanticObject); 
				return; 
			case CalculatorFormPackage.OUTPUT_VARIABLE:
				sequence_ResultOutput(context, (OutputVariable) semanticObject); 
				return; 
			case CalculatorFormPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case CalculatorFormPackage.PERCENT_LITERAL:
				sequence_Literal(context, (PercentLiteral) semanticObject); 
				return; 
			case CalculatorFormPackage.PLUS:
				sequence_Addition(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     Addition returns Minus
	 *     Addition.Plus_1_0_0_0 returns Minus
	 *     Addition.Minus_1_0_1_0 returns Minus
	 *     Multiplication returns Minus
	 *     Multiplication.Multi_1_0_0_0 returns Minus
	 *     Multiplication.Div_1_0_1_0 returns Minus
	 *     Prefixed returns Minus
	 *     Atomic returns Minus
	 *
	 * Constraint:
	 *     (left=Addition_Minus_1_0_1_0 right=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     Addition returns Plus
	 *     Addition.Plus_1_0_0_0 returns Plus
	 *     Addition.Minus_1_0_1_0 returns Plus
	 *     Multiplication returns Plus
	 *     Multiplication.Multi_1_0_0_0 returns Plus
	 *     Multiplication.Div_1_0_1_0 returns Plus
	 *     Prefixed returns Plus
	 *     Atomic returns Plus
	 *
	 * Constraint:
	 *     (left=Addition_Plus_1_0_0_0 right=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FieldReference
	 *     Addition returns FieldReference
	 *     Addition.Plus_1_0_0_0 returns FieldReference
	 *     Addition.Minus_1_0_1_0 returns FieldReference
	 *     Multiplication returns FieldReference
	 *     Multiplication.Multi_1_0_0_0 returns FieldReference
	 *     Multiplication.Div_1_0_1_0 returns FieldReference
	 *     Prefixed returns FieldReference
	 *     Atomic returns FieldReference
	 *
	 * Constraint:
	 *     ref=[Field|QualifiedName]
	 */
	protected void sequence_Atomic(ISerializationContext context, FieldReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.FIELD_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.FIELD_REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getRefFieldQualifiedNameParserRuleCall_2_1_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns ButtonSubmit
	 *     Field returns ButtonSubmit
	 *     PageChild returns ButtonSubmit
	 *     Button returns ButtonSubmit
	 *     ButtonSubmit returns ButtonSubmit
	 *
	 * Constraint:
	 *     (name=ID text=STRING autofocus?='autofocus'? disabled?='disabled'? value=STRING?)
	 */
	protected void sequence_ButtonSubmit(ISerializationContext context, ButtonSubmit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calculate returns Calculate
	 *
	 * Constraint:
	 *     (output=ResultOutput expression=Expression)
	 */
	protected void sequence_Calculate(ISerializationContext context, Calculate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.CALCULATE__OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.CALCULATE__OUTPUT));
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.CALCULATE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.CALCULATE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCalculateAccess().getOutputResultOutputParserRuleCall_1_0(), semanticObject.getOutput());
		feeder.accept(grammarAccess.getCalculateAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldChoiceOption returns FieldChoiceOption
	 *
	 * Constraint:
	 *     (
	 *         label=STRING 
	 *         autofocus?='autofocus'? 
	 *         checked?='checked'? 
	 *         disabled?='disabled'? 
	 *         readonly?='readonly'? 
	 *         required?='required'? 
	 *         value=STRING?
	 *     )
	 */
	protected void sequence_FieldChoiceOption(ISerializationContext context, FieldChoiceOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns FieldChoice
	 *     Field returns FieldChoice
	 *     FieldChoice returns FieldChoice
	 *     PageChild returns FieldChoice
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         autofocus?='autofocus'? 
	 *         checked?='checked'? 
	 *         disabled?='disabled'? 
	 *         form=STRING? 
	 *         label=STRING? 
	 *         multiple?='multiple'? 
	 *         notdisplayed?='notdisplayed'? 
	 *         readonly?='readonly'? 
	 *         required?='required'? 
	 *         value=STRING? 
	 *         options+=FieldChoiceOption*
	 *     )
	 */
	protected void sequence_FieldChoice(ISerializationContext context, FieldChoice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns FieldInput
	 *     Field returns FieldInput
	 *     FieldInput returns FieldInput
	 *     PageChild returns FieldInput
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         autofocus?='autofocus'? 
	 *         disabled?='disabled'? 
	 *         form=STRING? 
	 *         label=STRING? 
	 *         notdisplayed?='notdisplayed'? 
	 *         readonly?='readonly'? 
	 *         required?='required'? 
	 *         value=STRING?
	 *     )
	 */
	protected void sequence_FieldInput(ISerializationContext context, FieldInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldSelectChild returns FieldOptionGroup
	 *     FieldOptionGroup returns FieldOptionGroup
	 *
	 * Constraint:
	 *     (disabled?='disabled'? label=STRING? options+=FieldOption*)
	 */
	protected void sequence_FieldOptionGroup(ISerializationContext context, FieldOptionGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldSelectChild returns FieldOption
	 *     FieldOption returns FieldOption
	 *
	 * Constraint:
	 *     (text=STRING disabled?='disabled'? selected?='selected'? text=STRING? value=STRING?)
	 */
	protected void sequence_FieldOption(ISerializationContext context, FieldOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns FieldSelect
	 *     Field returns FieldSelect
	 *     FieldSelect returns FieldSelect
	 *     PageChild returns FieldSelect
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         autofocus?='autofocus'? 
	 *         disabled?='disabled'? 
	 *         form=STRING? 
	 *         label=STRING? 
	 *         multiple?='multiple'? 
	 *         required?='required'? 
	 *         size=INT? 
	 *         childs+=FieldSelectChild*
	 *     )
	 */
	protected void sequence_FieldSelect(ISerializationContext context, FieldSelect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Form returns Form
	 *
	 * Constraint:
	 *     (name=ID formElements+=FormElement* calculations+=Calculate*)
	 */
	protected void sequence_Form(ISerializationContext context, Form semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns Group
	 *     Group returns Group
	 *     PageChild returns Group
	 *
	 * Constraint:
	 *     (name=ID label=STRING? fields+=Field*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FloatLiteral
	 *     Addition returns FloatLiteral
	 *     Addition.Plus_1_0_0_0 returns FloatLiteral
	 *     Addition.Minus_1_0_1_0 returns FloatLiteral
	 *     Multiplication returns FloatLiteral
	 *     Multiplication.Multi_1_0_0_0 returns FloatLiteral
	 *     Multiplication.Div_1_0_1_0 returns FloatLiteral
	 *     Prefixed returns FloatLiteral
	 *     Atomic returns FloatLiteral
	 *     Literal returns FloatLiteral
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_Literal(ISerializationContext context, FloatLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.FLOAT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.FLOAT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueFLOATTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NumberLiteral
	 *     Addition returns NumberLiteral
	 *     Addition.Plus_1_0_0_0 returns NumberLiteral
	 *     Addition.Minus_1_0_1_0 returns NumberLiteral
	 *     Multiplication returns NumberLiteral
	 *     Multiplication.Multi_1_0_0_0 returns NumberLiteral
	 *     Multiplication.Div_1_0_1_0 returns NumberLiteral
	 *     Prefixed returns NumberLiteral
	 *     Atomic returns NumberLiteral
	 *     Literal returns NumberLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Literal(ISerializationContext context, NumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns PercentLiteral
	 *     Addition returns PercentLiteral
	 *     Addition.Plus_1_0_0_0 returns PercentLiteral
	 *     Addition.Minus_1_0_1_0 returns PercentLiteral
	 *     Multiplication returns PercentLiteral
	 *     Multiplication.Multi_1_0_0_0 returns PercentLiteral
	 *     Multiplication.Div_1_0_1_0 returns PercentLiteral
	 *     Prefixed returns PercentLiteral
	 *     Atomic returns PercentLiteral
	 *     Literal returns PercentLiteral
	 *
	 * Constraint:
	 *     value=PERCENT
	 */
	protected void sequence_Literal(ISerializationContext context, PercentLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.PERCENT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.PERCENT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValuePERCENTTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     forms+=Form+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Div
	 *     Addition returns Div
	 *     Addition.Plus_1_0_0_0 returns Div
	 *     Addition.Minus_1_0_1_0 returns Div
	 *     Multiplication returns Div
	 *     Multiplication.Multi_1_0_0_0 returns Div
	 *     Multiplication.Div_1_0_1_0 returns Div
	 *     Prefixed returns Div
	 *     Atomic returns Div
	 *
	 * Constraint:
	 *     (left=Multiplication_Div_1_0_1_0 right=Prefixed)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Multi
	 *     Addition returns Multi
	 *     Addition.Plus_1_0_0_0 returns Multi
	 *     Addition.Minus_1_0_1_0 returns Multi
	 *     Multiplication returns Multi
	 *     Multiplication.Multi_1_0_0_0 returns Multi
	 *     Multiplication.Div_1_0_1_0 returns Multi
	 *     Prefixed returns Multi
	 *     Atomic returns Multi
	 *
	 * Constraint:
	 *     (left=Multiplication_Multi_1_0_0_0 right=Prefixed)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.MULTI__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.MULTI__LEFT));
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.MULTI__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.MULTI__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FormElement returns Page
	 *     Page returns Page
	 *
	 * Constraint:
	 *     childs+=PageChild+
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultOutput returns OutputField
	 *
	 * Constraint:
	 *     field=[Field|QualifiedName]
	 */
	protected void sequence_ResultOutput(ISerializationContext context, OutputField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.OUTPUT_FIELD__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.OUTPUT_FIELD__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResultOutputAccess().getFieldFieldQualifiedNameParserRuleCall_0_2_0_1(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ResultOutput returns OutputVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ResultOutput(ISerializationContext context, OutputVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.OUTPUT_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.OUTPUT_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResultOutputAccess().getNameIDTerminalRuleCall_1_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ArithmeticSigned
	 *     Addition returns ArithmeticSigned
	 *     Addition.Plus_1_0_0_0 returns ArithmeticSigned
	 *     Addition.Minus_1_0_1_0 returns ArithmeticSigned
	 *     Multiplication returns ArithmeticSigned
	 *     Multiplication.Multi_1_0_0_0 returns ArithmeticSigned
	 *     Multiplication.Div_1_0_1_0 returns ArithmeticSigned
	 *     Prefixed returns ArithmeticSigned
	 *     UnaryOperation returns ArithmeticSigned
	 *     Atomic returns ArithmeticSigned
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_UnaryOperation(ISerializationContext context, ArithmeticSigned semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.UNARY_OPERATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.UNARY_OPERATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryOperationAccess().getExpressionAtomicParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanNegation
	 *     Addition returns BooleanNegation
	 *     Addition.Plus_1_0_0_0 returns BooleanNegation
	 *     Addition.Minus_1_0_1_0 returns BooleanNegation
	 *     Multiplication returns BooleanNegation
	 *     Multiplication.Multi_1_0_0_0 returns BooleanNegation
	 *     Multiplication.Div_1_0_1_0 returns BooleanNegation
	 *     Prefixed returns BooleanNegation
	 *     UnaryOperation returns BooleanNegation
	 *     Atomic returns BooleanNegation
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_UnaryOperation(ISerializationContext context, BooleanNegation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CalculatorFormPackage.Literals.UNARY_OPERATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CalculatorFormPackage.Literals.UNARY_OPERATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryOperationAccess().getExpressionAtomicParserRuleCall_0_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
